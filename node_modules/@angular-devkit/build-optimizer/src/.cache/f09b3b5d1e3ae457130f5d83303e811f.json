{"remainingRequest":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-redux\\store\\lib\\src\\components\\fractal-reducer-map.js","dependencies":[{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-redux\\store\\lib\\src\\components\\fractal-reducer-map.js","mtime":1520207990000},{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar set_in_1 = require(\"../utils/set-in\");\nvar get_in_1 = require(\"../utils/get-in\");\nvar reducerMap = {};\nvar composeReducers = function () {\n    var reducers = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        reducers[_i] = arguments[_i];\n    }\n    return function (state, action) { return reducers.reduce(function (subState, reducer) { return reducer(subState, action); }, state); };\n};\nvar ɵ0 = composeReducers;\nexports.ɵ0 = ɵ0;\n/**\n * @param rootReducer Call this on your root reducer to enable SubStore\n * functionality for pre-configured stores (e.g. using NgRedux.provideStore()).\n * NgRedux.configureStore\n * does it for you under the hood.\n */\nfunction enableFractalReducers(rootReducer) {\n    reducerMap = {};\n    return composeReducers(rootFractalReducer, rootReducer);\n}\nexports.enableFractalReducers = enableFractalReducers;\n/** @hidden */\nfunction registerFractalReducer(basePath, localReducer) {\n    var existingFractalReducer = reducerMap[JSON.stringify(basePath)];\n    if (existingFractalReducer && existingFractalReducer !== localReducer) {\n        throw new Error(\"attempt to overwrite fractal reducer for basePath \" + basePath);\n    }\n    reducerMap[JSON.stringify(basePath)] = localReducer;\n}\nexports.registerFractalReducer = registerFractalReducer;\n/** @hidden */\nfunction replaceLocalReducer(basePath, nextLocalReducer) {\n    reducerMap[JSON.stringify(basePath)] = nextLocalReducer;\n}\nexports.replaceLocalReducer = replaceLocalReducer;\nfunction rootFractalReducer(state, action) {\n    if (state === void 0) { state = {}; }\n    var fractalKey = action['@angular-redux::fractalkey'];\n    var fractalPath = fractalKey ? JSON.parse(fractalKey) : [];\n    var localReducer = reducerMap[fractalKey || ''];\n    return fractalKey && localReducer\n        ? set_in_1.setIn(state, fractalPath, localReducer(get_in_1.getIn(state, fractalPath), action))\n        : state;\n}\n//# sourceMappingURL=fractal-reducer-map.js.map",null]}