{"remainingRequest":"C:\\Users\\HP\\documents\\Heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP\\documents\\Heschelp\\ClientApp\\node_modules\\redux-observable\\lib\\esm\\combineEpics.js","dependencies":[{"path":"C:\\Users\\HP\\documents\\Heschelp\\ClientApp\\node_modules\\redux-observable\\lib\\esm\\combineEpics.js","mtime":1528305815000},{"path":"C:\\Users\\HP\\documents\\Heschelp\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\HP\\documents\\Heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport { merge } from 'rxjs/observable/merge';\n\n/**\n  Merges all epics into a single one.\n */\nexport var combineEpics = function combineEpics() {\n  for (var _len = arguments.length, epics = Array(_len), _key = 0; _key < _len; _key++) {\n    epics[_key] = arguments[_key];\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return merge.apply(undefined, _toConsumableArray(epics.map(function (epic) {\n      var output$ = epic.apply(undefined, args);\n      if (!output$) {\n        throw new TypeError('combineEpics: one of the provided Epics \"' + (epic.name || '<anonymous>') + '\" does not return a stream. Double check you\\'re not missing a return statement!');\n      }\n      return output$;\n    })));\n  };\n};",null]}