{"remainingRequest":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\redux-observable\\lib\\esm\\createEpicMiddleware.js","dependencies":[{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\redux-observable\\lib\\esm\\createEpicMiddleware.js","mtime":1528305815000},{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1510929699000},{"path":"C:\\Users\\HP\\documents\\heschelp\\ClientApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518048966000}],"contextDependencies":[],"result":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nimport { Subject } from 'rxjs/Subject';\nimport { map } from 'rxjs/operator/map';\nimport { switchMap } from 'rxjs/operator/switchMap';\nimport { ActionsObservable } from './ActionsObservable';\nimport { EPIC_END } from './EPIC_END';\n\nvar defaultAdapter = {\n  input: function input(action$) {\n    return action$;\n  },\n  output: function output(action$) {\n    return action$;\n  }\n};\n\nvar defaultOptions = {\n  adapter: defaultAdapter\n};\n\nexport function createEpicMiddleware(rootEpic) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n\n  if (typeof rootEpic !== 'function') {\n    throw new TypeError('You must provide a root Epic to createEpicMiddleware');\n  }\n\n  // even though we used default param, we need to merge the defaults\n  // inside the options object as well in case they declare only some\n  options = _extends({}, defaultOptions, options);\n  var input$ = new Subject();\n  var action$ = options.adapter.input(new ActionsObservable(input$));\n  var epic$ = new Subject();\n  var store = void 0;\n\n  var epicMiddleware = function epicMiddleware(_store) {\n    store = _store;\n\n    return function (next) {\n      var _context;\n\n      (_context = map.call(epic$, function (epic) {\n        var vault = process.env.NODE_ENV === 'production' ? store : {\n          getState: store.getState,\n          dispatch: function dispatch(action) {\n            require('./utils/console').deprecate('calling store.dispatch() directly in your Epics is deprecated and will be removed. Instead, emit actions through the Observable your Epic returns.\\n\\n  https://goo.gl/WWNYSP');\n            return store.dispatch(action);\n          }\n        };\n\n        var output$ = 'dependencies' in options ? epic(action$, vault, options.dependencies) : epic(action$, vault);\n\n        if (!output$) {\n          throw new TypeError('Your root Epic \"' + (epic.name || '<anonymous>') + '\" does not return a stream. Double check you\\'re not missing a return statement!');\n        }\n\n        return output$;\n      }), switchMap).call(_context, function (output$) {\n        return options.adapter.output(output$);\n      }).subscribe(store.dispatch);\n\n      // Setup initial root epic\n      epic$.next(rootEpic);\n\n      return function (action) {\n        var result = next(action);\n        input$.next(action);\n        return result;\n      };\n    };\n  };\n\n  epicMiddleware.replaceEpic = function (rootEpic) {\n    // gives the previous root Epic a last chance\n    // to do some clean up\n    store.dispatch({ type: EPIC_END });\n    // switches to the new root Epic, synchronously terminating\n    // the previous one\n    epic$.next(rootEpic);\n  };\n\n  return epicMiddleware;\n}",null]}